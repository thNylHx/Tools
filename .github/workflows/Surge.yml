name: 同步 Surge 上游规则

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:
    - cron: "0 */6 * * *"  # 设置定时触发，表示每6小时执行一次

jobs:
  # 定义名为 Fork-FLITER-list 的任务
  Fork:
    runs-on: ubuntu-latest  # 在 ubuntu-latest 环境中运行任务
    env:
      TZ: 'Asia/Shanghai'  # 配置时区为 Asia/Shanghai

  
    steps:
      # 步骤1：检出目标仓库
      - name: 检出目标仓库
        uses: actions/checkout@v4
        with:
          repository: thNylHx/Tools  # 目标仓库：thNylHx/Tools
          path: Tools-repo         # 本地目录名称：Tools-repo

      # 步骤2：执行内嵌脚本来更新规则 
      - name: 执行内嵌脚本
        run: |
          #!/bin/bash
          repo_name=$(basename "$GITHUB_REPOSITORY")
          if [[ "$repo_name" == "Tools" ]]; then
              echo "Running in Tools repository"
              mkdir -p Tools/Ruleset/Surge/{Block,Media,Other}
              # 合并 Ads 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
              )
              > Tools-repo/Ruleset/Surge/Block/Ads_ml.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Block/Ads_ml.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Block/Ads_ml.list
              done

              # 合并 Facebook 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"
                  )
              > Tools-repo/Ruleset/Surge/Media/Facebook.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Facebook.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Facebook.list
              done

              # 合并 Netflix 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
                  )
              > Tools-repo/Ruleset/Surge/Media/Netflix.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Netflix.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Netflix.list
              done

              # 合并 Twitter 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
                  )
              > Tools-repo/Ruleset/Surge/Media/Twitter.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Twitter.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Twitter.list
              done

              # 合并 Google 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
                  )
              > Tools-repo/Ruleset/Surge/Other/Google.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Other/Google.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Other/Google.list
              done

              files=(
                  # Ads
                  "Ads_all.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
                  "Ads_BanAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"
                  "Ads_BanProgramAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list"
                  "Ads_Adblock4limbo_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/Surge/rule/Adblock4limbo_surge.list"
                  "Ads_easyprivacy_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easyprivacy_surge.list"
                  "Ads_easylist_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylist_surge.list"
                  "Ads_Advertising.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list"
                  "Ads_Malicious.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list"
                  "Ads_Tracking.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list"

                  # Other
                  "Private_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.list"
                  "PayPal.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/paypal.list"
                  "Openai.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/openai.list"
                  "Steam.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/steam.list"
                  "Epic.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/epicgames.list"
                  "Google.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list"
                  "Google_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
                  "Line.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/line.list"
                  "GitHub.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/github.list"
                  "OneDrive.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/onedrive.list"
                  "Microsoft.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/microsoft.list"
                  "GlobalGFW.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list"
                  "Global.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/geolocation-!cn.list"
                  "Apple.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/apple.list"
                  "AppleCN.list https://github.com/ACL4SSR/ACL4SSR/raw/master/Clash/Apple.list"
                  "China.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/cn.list"
                  "China_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.list"
                  "ChinaASN.list https://raw.githubusercontent.com/missuo/ASN-China/main/ASN.China.list"

                  # 
                 "YouTube.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/youtube.list"
                 "YouTubeMusic.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTubeMusic.list"
                 "Telegram.list https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Rules/Telegram.list"
                 "Twitter.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list"
                 "Twitter_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
                 "Facebook.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list"
                 "Facebook_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list"
                 "Instagram.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"
                 "TikTok.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/tiktok.list"
                 "GlobalMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list"
                 "BilibiliHMT.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/BilibiliHMT.list"
                 "ChinaMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list"
                 "Bilibili.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/bilibili.list"
                 "Disney.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/disney.list"
                 "Netflix.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list"
                 "Netflix_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
                 "Spotify.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/spotify.list"
              )
              for file in "${files[@]}"; do
                  set -- $file
                  echo "Downloading: $2"
                  curl -A "Surge iOS/3367" -f -L -o "Tools-repo/Ruleset/$1" "$2" || { echo "Download Failed: $2"; exit 1; }
              done
              echo "Files downloaded successfully."
          else
              echo "Unknown repository. Please run this script in either Tools or Tools repository."
              exit 1
          fi

      # 步骤3：执行规则转换和修改
      - name: 规则转换和修改
        run: |
          # 遍历 Surge 下的 Block、Media、Other 目录
          for dir in Tools-repo/Ruleset/Surge/Block Tools-repo/Ruleset/Surge/Media Tools-repo/Ruleset/Surge/Other; do
            if [ -d "$dir" ]; then
              cd "$dir"
              for file in *.list; do
                # 跳过不修改的指定文件
                if [[ "$file" == "BlockPrivacy.list" ]]; then
                  echo "Skipping $file"
                  continue
                fi
                if [ -f "$file" ]; then
                  sed -i -e 's/, /,/g' \
                         -e 's/;/# /g' \
                         -e 's/host,/HOST,/g' \
                         -e 's/host-/HOST-/g' \
                         -e 's/-suffix/-SUFFIX/g' \
                         -e 's/-keyword/-KEYWORD/g' \
                         -e 's/ip-cidr/IP-CIDR/g' \
                         -e 's/-wildcard/-WILDCARD/g' \
                         -e 's/geoip/GEOIP/g' \
                         -e 's/HOST,/DOMAIN,/g' \
                         -e 's/HOST-/DOMAIN-/g' \
                         -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                         -e 's/,REJECT$//g' \
                         -e 's/,DIRECT$//g' \
                         -e 's/,reject$//g' \
                         -e 's/,direct$//g' \
                         -e '/# 更新：/d' \
                         -e '/# AUTHOR:/d' \
                         -e '/# REPO:/d' \
                         -e '/# UPDATED:/d' \
                         -e '/# 数目: /d' \
                         -e '/# 规则: /d' \
                         -e '/# 数量: /d' \
                         -e '/404: Not Found/d' \
                         -e '/DOMAIN-REGEX,/d' \
                         "$file"
                  # 如果为 IP 规则且不包含 no-resolve 则添加 no-resolve
                  awk '/^IP-/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile
                  mv tmpfile "$file"
                  # 删除 // 及其后面的内容
                  sed -i -E 's|//.*||' "$file"
                else
                  echo "$file not found."
                fi
              done

              # 格式转换：将 domain-set 转换为 rule-set
              for file in *_ip*.list; do
                if [ -f "$file" ]; then
                  sed -i -E 's|^(([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]+)$|IP-CIDR,\1,no-resolve|' "$file"
                  sed -i -E 's|^([0-9a-fA-F:]+/[0-9]+)$|IP-CIDR6,\1,no-resolve|' "$file"
                else
                  echo "$file not found."
                fi
              done

              cd - > /dev/null
            else
              echo "Directory $dir not found."
            fi
          done

      # 修正规则
      - name: 修正规则
        run: |
          # 启用 globstar，以支持递归匹配子目录下的 .list 文件
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [ -f "$file" ]; then
              # 将以"."开头的行的第一个"."替换为 "DOMAIN-SUFFIX"
              sed -i '/^\./s/^\./DOMAIN-SUFFIX,/' "$file"
              # 将除了以 "#" 开头、"空行" 开头之外的行, 在行首添加 "DOMAIN"
              sed -i -E '/^\s*$/b; /^\s*[#;]/b; /^DOMAIN,|^DOMAIN-SUFFIX,|^DOMAIN-KEYWORD,|^DOMAIN-WILDCARD,|^IP-CIDR,|^IP-CIDR6,|^IP-ASN,|^GEOIP,|^AND,|^OR,|^NOT,|^URL-REGEX,|^USER-AGENT,|^PROCESS-NAME,|^DEST-PORT,/b; s/^([^#])/DOMAIN,\1/' "$file"
              # 删除文件中所有 [以 # 或 ; 开头的注释行] + [空行] + [每行中 // 及其后面的内容]
              sed -i -e '/^\s*[#;]/d' -e '/^$/d' -e 's| //.*||'  "$file"
              # 删除指定域名
              sed -i -e '/DOMAIN,this_ruleset_is_made_by_sukkaw.ruleset.skk.moe/d' "$file"
              sed -i -e 's/,reject$//' "$file"
              # 修正格式
              sed -i 's/, */,/g' "$file"
            else
              echo "$file not found."
            fi
          done

      # 步骤4：追加规则
      - name: 合并规则
        run: |
          # 合并 ConnersHua 到 Ads_ConnersHua
          if [ -f "Tools-repo/Ruleset/Surge/Block/Ads_ConnersHua.list" ]; then
            cat Tools-repo/Ruleset/Surge/Block/Ads_Advertising.list >> Tools-repo/Ruleset/Surge/Block/Ads_ConnersHua.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_Malicious.list >> Tools-repo/Ruleset/Surge/Block/Ads_ConnersHua.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_Tracking.list >> Tools-repo/Ruleset/Surge/Block/Ads_ConnersHua.list
          else
            echo "Ads_ConnersHua.list not found."
          fi

          # 合并 limbopro 到 Ads_limbopro
          if [ -f "Tools-repo/Ruleset/Surge/Block/Ads_limbopro.list" ]; then
            cat Tools-repo/Ruleset/Surge/Block/Ads_Adblock4limbo_surge.list >> Tools-repo/Ruleset/Surge/Block/Ads_limbopro.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_easyprivacy_surge.list >> Tools-repo/Ruleset/Surge/Block/Ads_limbopro.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_easylist_surge.list >> Tools-repo/Ruleset/Surge/Block/Ads_limbopro.list
          else
            echo "Ads_limbopro.list not found."
          fi

          # 合并 Other 到 Ads_ml
          if [ -f "Tools-repo/Ruleset/Surge/Block/Ads_ml.list" ]; then
            cat Tools-repo/Ruleset/Surge/Block/Ads_th.list >> Tools-repo/Ruleset/Surge/Block/Ads_ml.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_RuCu6.list >> Tools-repo/Ruleset/Surge/Block/Ads_ml.list
            cat Tools-repo/Ruleset/Surge/Block/Ads_all.list >> Tools-repo/Ruleset/Surge/Block/Ads_ml.list
          else
            echo "Ads_ml.list not found."
          fi

      # 步骤6：对 Surge 下所有子目录中的 .list 文件追加规则信息（优化处理）
      - name: 追加规则信息
        run: |
          # 启用 globstar，以支持递归匹配子目录下的 .list 文件
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [ -f "$file" ]; then
              file_names=$(basename "$file" .list)
              line_count=$(wc -l < "$file")
              awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
              awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
              sed -i '2a\\' "$file"
            else
              echo "$file not found."
            fi
          done

      # 步骤7：提交更改并推送到仓库
      - name: 推送到仓库
        run: |
          cd Tools-repo
          if [[ -n $(git status -s) ]]; then
            echo "发现更新，准备提交..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin HEAD
            echo "更新已推送到仓库"
          else
            echo "没有需要提交的更改"
          fi

      # 步骤8：获取当前时间并设置为环境变量
      - name: 获取当前时间
        id: current_time
        run: |
          echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # 步骤9：发送 Telegram 通知
      - name: 发送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📢 通知
            🚀 来源：GitHub Actions
            ✉️ 标题：同步 Surge 上游规则
            📦 仓库：JK567
            ⏰ 时间：${{ env.time }}
            🎉 状态：恭喜你！全部任务执行成功

      # 步骤10：清理旧的工作流运行记录
      - name: 清理工作流
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 5
