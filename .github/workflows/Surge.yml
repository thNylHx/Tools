name: 同步 Surge 上游规则

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

jobs:
  Fork:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    steps:
      - name: 检出目标仓库
        uses: actions/checkout@v4
        with:
          repository: thNylHx/Tools
          path: Tools-repo

      - name: 执行内嵌脚本
        run: |
          #!/bin/bash
          repo_name=$(basename "$GITHUB_REPOSITORY")
          if [[ "$repo_name" == "Tools" ]]; then
              echo "Running in Tools repository"
              mkdir -p Tools-repo/Ruleset/Surge/{Block,Media,Other}
              # 合并 广告 规则
              urls=(
                  "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"
                  "https://raw.githubusercontent.com/Abcd789JK/Tools/refs/heads/main/Ruleset/Surge/Block/BlockAds.list"
                  "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list"
                  "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list"
                  "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list"
                  "https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
              )
              > Tools-repo/Ruleset/Surge/Block/Ads_Block.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Block/Ads_Block.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Block/Ads_Block.list
              done

              # 合并 脸书 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"
              )
              > Tools-repo/Ruleset/Surge/Media/Facebook.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Facebook.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Facebook.list
              done

              # 合并 奈飞 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
              )
              > Tools-repo/Ruleset/Surge/Media/Netflix.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Netflix.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Netflix.list
              done

              # 合并 推特 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
              )
              > Tools-repo/Ruleset/Surge/Media/Twitter.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/Twitter.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/Twitter.list
              done

              # 合并 油管 规则
              urls=(
                  "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTubeMusic.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/youtube.list"
              )
              > Tools-repo/Ruleset/Surge/Media/YouTube.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Media/YouTube.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Media/YouTube.list
              done

              # 合并 谷歌 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
              )
              > Tools-repo/Ruleset/Surge/Other/Google.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Other/Google.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Other/Google.list
              done

              # 合并 海外 规则
              urls=(
                  "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list"
                  "https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/ruleset/gfw.txt"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/geolocation-!cn.list"
              )
              > Tools-repo/Ruleset/Surge/Other/Global.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Other/Global.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Other/Global.list
              done

              # 合并 游戏 规则
              urls=(
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/steam.list"
                  "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/epicgames.list"
              )
              > Tools-repo/Ruleset/Surge/Other/Game.list
              for url in "${urls[@]}"; do
                  echo "Downloading: $url"
                  curl -f -L "$url" >> Tools-repo/Ruleset/Surge/Other/Game.list || { echo "Download Failed: $url"; exit 1; }
                  echo "" >> Tools-repo/Ruleset/Surge/Other/Game.list
              done

              files=(
                  ##### Ads #####
                  # MetaCubeX
                  "Block/Ads_all.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
                  # ACL4SSR
                  "Block/Ads_BanAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"
                  "Block/Ads_BanProgramAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list"
                  # limbopro
                  "Block/Ads_Easylist_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylist_surge.list"
                  "Block/Ads_EasyListChina.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylistchina_surge.list"
                  "Block/Ads_EasyPrivacy_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easyprivacy_surge.list"
                  "Block/Ads_Adblock4limbo_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/Surge/rule/Adblock4limbo_surge.list"
                  # ConnersHua
                  "Block/Ads_Advertising.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list"
                  "Block/Ads_Malicious.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list"
                  "Block/Ads_Tracking.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list"
                  # dler-io TG-Twilight geekdada Abcd789JK
                  "Block/Ads_BlockAds.list https://raw.githubusercontent.com/Abcd789JK/Tools/refs/heads/main/Ruleset/Surge/Block/BlockAds.list"
                  "Block/Ads_Dlerio.list https://raw.githubusercontent.com/dler-io/Rules/main/Surge/Surge%203/Provider/AdBlock.list"
                  "Block/Ads_AWAvenue.list https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge.list"
                  "Block/Ads_Chinese.list https://raw.githubusercontent.com/geekdada/surge-list/master/domain-set/chinese-filter.txt"

                  ##### Other #####
                  # 本地/局域网
                  "Other/Private_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.list"
                  # PayPal
                  "Other/PayPal.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/paypal.list"
                  # Openai
                  "Other/Openai.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/openai.list"
                  # Steam
                  "Other/Steam.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/steam.list"
                  # Epic
                  "Other/Epic.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/epicgames.list"
                  # 谷歌
                  "Other/vGoogle.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list"
                  "Other/Google_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
                  # Line
                  "Other/Line.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/line.list"
                  # 微软
                  "Other/GitHub.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/github.list"
                  "Other/OneDrive.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/onedrive.list"
                  "Other/Microsoft.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/microsoft.list"
                  # 海外
                  "Other/GlobalGFWa.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list"
                  "Other/GlobalGFW.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/ruleset/gfw.txt"
                  "Other/vGlobal.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/geolocation-!cn.list"
                  # 苹果
                  "Other/Apple.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/apple.list"
                  "Other/AppleCN.list https://github.com/ACL4SSR/ACL4SSR/raw/master/Clash/Apple.list"
                  # 中国
                  "Other/China.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/cn.list"
                  "Other/China_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.list"
                  "Other/ChinaASN.list https://raw.githubusercontent.com/missuo/ASN-China/main/ASN.China.list"

                  ##### Media #####
                  # 油管
                  "Media/vYouTube.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/youtube.list"
                  "Media/YouTubeMusic.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTubeMusic.list"
                  # 电报
                  "Media/Telegram.list https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Rules/Telegram.list"
                  # 推特
                  "Media/vTwitter.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list"
                  "Media/Twitter_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
                  # 脸书
                  "Media/vFacebook.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list"
                  "Media/Facebook_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list"
                  "Media/Instagram.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"
                  # 迪士尼
                  "Media/Disney.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/disney.list"
                  # 奈飞
                  "Media/vNetflix.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list"
                  "Media/Netflix_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
                  # Spotify
                  "Media/Spotify.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/spotify.list"
                  # TikTok
                  "Media/TikTok.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/tiktok.list"
                  # 海外媒体
                  "Media/GlobalMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list"
                  # B站海外
                  "Media/BilibiliHMT.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/BilibiliHMT.list"
                  # 中国媒体
                  "Media/ChinaMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list"
                  "Media/Bilibili.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/bilibili.list"
              )
              for file in "${files[@]}"; do
                  file_name=$(echo $file | cut -d " " -f 1)
                  url=$(echo $file | cut -d " " -f 2)
                  if [[ ! "$url" =~ ^https?: ]]; then
                      url="https:$url"
                  fi
                  echo "Downloading: $file_name"
                  curl -f -L "$url" -o "Tools-repo/Ruleset/Surge/$file_name" || { echo "Download Failed: $url"; exit 1; }
              done
          else
              echo "This is not the Tools repository. Skipping."
          fi
        shell: bash

      - name: 修正规则
        run: |
          # 开启 globstar 选项，支持递归匹配子目录中的文件
          shopt -s globstar
          # 遍历 Tools-repo/Ruleset/Surge 目录下所有 .list 文件
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [ -f "$file" ]; then
              # 删除文件中所有 [以 DOMAIN-REGEX" 开头的行]
              sed -i '/^DOMAIN-REGEX,/d' "$file"
              # 将文件中所有 [以"."开头的行的第一个"."替换为 "DOMAIN-SUFFIX"] 
              sed -i 's/^\s*\./DOMAIN-SUFFIX,/' "$file"
              # 跳过文件中所有 [以 "#" ";" "//" 开头的注释行、"空行" 和下面的前缀规则行，给没有前缀的行加 "DOMAIN"]
              sed -i -E '
                /^\s*$/b;                                       # 跳过空行
                /^\s*[#;]/b;                                    # 跳过 `#` 或 `;` 开头的注释
                /^\s*\/\//b;                                    # 跳过 `//` 开头的行
                /^\s*[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/b;  # 跳过 IPv4 CIDR 规则
                /^\s*[0-9A-Fa-f:]+\/[0-9]+/b;                   # 跳过 IPv6 CIDR 规则
                /^DOMAIN,|^DOMAIN-SUFFIX,|^DOMAIN-KEYWORD,|^DOMAIN-WILDCARD,|^IP-CIDR,|^IP-CIDR6,|^IP-ASN,|^GEOIP,|^AND,|^OR,|^NOT,|^URL-REGEX,|^USER-AGENT,|^PROCESS-NAME,|^DEST-PORT,/b;  # 跳过已有前缀的规则
                s/^([^#])/DOMAIN,\1/                            # 给没有前缀的行加 "DOMAIN"
              ' "$file"
              # 删除文件中所有 [以 "#" ";" "//" 开头的注释行] + [空行] + [每行中 // 及其后面的内容]
              sed -i -E '
                /^\s*[#;]/d;          # 删除 `#` 或 `;` 开头的注释行
                /^\s*\/\//d;          # 删除 `//` 开头的注释行
                /^$/d;                # 删除空行
                s| //.*||             # 删除 `//` 后面的内容
              ' "$file"
              # 删除指定域名
              sed -i -e '/DOMAIN,this_ruleset_is_made_by_sukkaw.ruleset.skk.moe/d' "$file"
              # 删除文件中所有 [以 ",reject" 及其后面的内容]
              sed -i -E 's/,reject(,[^,]+)*$//I' "$file"
              # 修正格式
              sed -i 's/, */,/g' "$file"
            else
              echo "$file not found."
            fi
          done

      - name: 规则转换和修改
        run: |
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [ -f "$file" ]; then
              sed -i -E '/^IP-CIDR,/!{/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/s/^/IP-CIDR,/}' "$file"
              sed -i -E '/^IP-CIDR6,/!{/^[a-fA-F0-9]+:|([a-fA-F0-9]+:+)+[a-fA-F0-9]+\/[0-9]+/s/^/IP-CIDR6,/}' "$file"
              awk '
              /^DOMAIN,/           { print "0 " $0; next }
              /^DOMAIN-SUFFIX,/    { print "1 " $0; next }
              /^DOMAIN-KEYWORD,/   { print "2 " $0; next }
              /^DOMAIN-WILDCARD,/  { print "3 " $0; next }
              /^IP-CIDR,/          { print "4 " $0; next }
              /^IP-CIDR6,/         { print "5 " $0; next }
              /^IP-ASN,/           { print "6 " $0; next }
              /^PROCESS-NAME,/     { print "7 " $0; next }
              /^URL-REGEX,/        { print "8 " $0; next }
              /^USER-AGENT,/       { print "9 " $0; next }
              /^GEOIP,/            { print "10 " $0; next }
              /^AND,/              { print "11 " $0; next }
              /^OR,/               { print "12 " $0; next }
              /^NOT,/              { print "13 " $0; next }
              /^DEST-PORT,/        { print "14 " $0; next }
                                   { print "15 " $0; next }
              ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
              awk '/^(IP-CIDR,|IP-CIDR6,)/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile && mv tmpfile "$file"
              awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            else
              echo "$file not found."
            fi
          done

      - name: 追加规则信息
        run: |
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [ -f "$file" ]; then
              file_names=$(basename "$file" .list)
              line_count=$(wc -l < "$file")
              awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
              awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
              sed -i '2a\\' "$file"
            else
              echo "$file not found."
            fi
          done

      - name: 推送到仓库
        run: |
          cd Tools-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin HEAD
            echo "更新已推送到仓库"
          else
            echo "没有需要提交的更改"
          fi

      - name: 获取当前时间
        id: current_time
        run: |
          echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: 发送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📢 通知
            🚀 来源：GitHub Actions
            ✉️ 标题：同步 Surge 上游规则
            📦 仓库：JK567
            ⏰ 时间：${{ env.time }}
            🎉 状态：恭喜你！全部任务执行成功

      - name: 清理工作流
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 5