name: 同步 mihomo 上游规则  # 设置工作流名称

on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:
    - cron: "0 */6 * * *"  # 设置定时触发，表示每6小时执行一次

jobs:
  Fork-FLITER-list:
    runs-on: ubuntu-latest  # 在最新版本的Ubuntu环境中运行工作流
    env:
      TZ: 'Asia/Shanghai'  # 设置时区为上海时间，确保时间一致

    steps:
    # 步骤1：检出目标仓库
    - name: 检出目标仓库
      uses: actions/checkout@v4  # 使用GitHub提供的action来检出代码仓库
      with:
        repository: thNylHx/Tools  # 指定要检出的仓库
        path: Tools-repo  # 将仓库检出到的本地路径

    # 步骤2：执行远程脚本来更新规则
    - name: 执行脚本
      run: |
        echo "开始执行脚本..."  # 输出提示，表明脚本执行开始
        curl https://raw.githubusercontent.com/thNylHx/Tools/main/Script/Fork/mihomo.sh | sh  # 使用curl命令下载并执行远程脚本
        echo "脚本执行完毕"  # 输出提示，表明脚本执行完成

    # 步骤3：提交更改并推送到仓库
    - name: 推送到仓库
      run: |
        cd Tools-repo  # 进入到已经检出的目标仓库目录
        if [[ -n $(git status -s) ]]; then  # 如果有修改的文件（即有更改）
          echo "发现更新，准备提交..."  # 输出提示，表示发现更新并准备提交
          git config --local user.email "action@github.com"  # 配置提交的用户邮箱
          git config --local user.name "GitHub Action"  # 配置提交的用户名
          git add .  # 将所有修改的文件添加到暂存区
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"  # 提交更改，提交信息包含当前时间戳
          git push origin HEAD  # 将更改推送到远程仓库
          echo "更新已推送到仓库"  # 输出提示，表示更新已经成功推送到仓库
        else
          echo "没有需要提交的更改"  # 如果没有文件修改，输出提示表示没有更改需要提交
        fi

    # 步骤4：发送Telegram通知
    - name: Telegram 推送通知
      run: |
        # 定义消息内容，包含表情符号、标题、状态和当前时间
        MESSAGE=$'📢  通知'$' \n🚀  来源：JK567 仓库'$' \n✉️  标题：同步 mihomo 上游规则'$' \n🔔  状态：GitHub Actions 执行完成'$'\n⏰  时间：'"$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
        
        # 使用curl命令调用Telegram的Bot API来发送消息
        curl -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=${MESSAGE}"

    # 步骤5：清理旧的工作流运行记录
    - name: 清理工作流
      uses: Mattraks/delete-workflow-runs@main  # 使用Mattraks提供的GitHub Action来清理工作流记录
      with:
        retain_days: 0  # 设置保留的工作流运行天数为0，即清除所有过期的运行记录
        keep_minimum_runs: 5  # 至少保留5次工作流运行记录，避免过度清理