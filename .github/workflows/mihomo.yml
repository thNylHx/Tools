# 设置工作流名称，定义该 GitHub Actions 工作流的名称
name: 同步 mihomo 上游规则  # 工作流名称：同步 mihomo 上游规则

# 定义触发该工作流的事件
on:
  # 允许通过 GitHub 界面手动触发工作流
  workflow_dispatch:  # 支持手动触发
  schedule:  # 定时触发设置
    # 设置定时触发规则，使用 cron 语法表示每6小时触发一次
    - cron: "0 */6 * * *"  # 每6小时执行一次工作流（分钟为0，每6小时一次）

# 工作流
jobs:
  # 定义名为 Fork-FLITER-list 的任务
  Fork-FLITER-list:
    # 指定运行环境为最新版本的 Ubuntu
    runs-on: ubuntu-latest  # 在 ubuntu-latest 环境中运行任务
    env:
      # 设置环境变量 TZ 为上海时间，确保任务中的时间与上海时区一致
      TZ: 'Asia/Shanghai'  # 配置时区为 Asia/Shanghai

    steps:
      # 步骤1：检出目标仓库
      - name: 检出目标仓库  # 定义步骤名称：检出目标仓库
        uses: actions/checkout@v4  # 使用 GitHub 官方 checkout action 检出代码
        with:
          # 指定需要检出的远程仓库，格式为“用户名/仓库名”
          repository: thNylHx/Tools  # 目标仓库：thNylHx/Tools
          # 设置将仓库检出到本地的目录名称为 Tools-repo
          path: Tools-repo  # 本地目录名称：Tools-repo

      # 步骤2：执行远程脚本来更新规则
      - name: 开始执行脚本  # 定义步骤名称：执行脚本
        run: |  # 使用 shell 脚本执行下面的命令
          echo "开始执行脚本..."  # 输出提示信息，表示脚本执行开始
          # 使用 curl 命令从远程仓库下载 fork.sh 脚本，并通过 sh 执行
          curl https://raw.githubusercontent.com/thNylHx/Tools/main/Script/Fork/mihomo.sh | sh  # 下载并执行远程脚本 fork.sh
          echo "脚本执行完毕"  # 输出提示信息，表示脚本执行结束

      # 步骤3：提交更改并推送到仓库
      - name: 推送到仓库  # 定义步骤名称：推送到仓库
        run: |  # 使用 shell 脚本执行下面的命令
          cd Tools-repo  # 切换到已检出的目标仓库目录
          # 检查当前 git 状态，判断是否存在文件更改（git status -s 有输出表示有更改）
          if [[ -n $(git status -s) ]]; then  # 如果存在未提交的更改，则执行提交操作
            echo "发现更新，准备提交..."  # 输出提示信息，表示检测到更新
            git config --local user.email "action@github.com"  # 配置本地 git 用户邮箱
            git config --local user.name "GitHub Action"  # 配置本地 git 用户名
            git add .  # 将所有更改添加到 git 暂存区
            # 提交更改，提交信息中包含当前上海时区的时间戳
            git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"  # 提交更新并标注提交时间
            git push origin HEAD  # 将本次提交推送到远程仓库当前分支
            echo "更新已推送到仓库"  # 输出提示信息，表示推送操作已完成
          else  # 若没有检测到任何更改
            echo "没有需要提交的更改"  # 输出提示信息，表示当前没有文件更改需要提交
          fi  # 结束 if 条件判断

      # 步骤4：获取当前时间并设置为环境变量
      - name: 获取当前时间
        id: current_time
        run: |
          echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # 步骤5：发送 Telegram 通知
      - name: 发送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📢 通知
            🚀 来源：GitHub Actions
            📦 仓库：JK567
            ✉️ 标题：同步 mihomo 上游规则
            ⏰ 时间：${{ env.time }}
            🎉 状态：恭喜你！全部任务执行成功

      # 步骤6：清理旧的工作流运行记录
      - name: 清理工作流  # 定义步骤名称：清理工作流
        uses: Mattraks/delete-workflow-runs@main  # 使用 Mattraks 提供的 Action 清理旧的工作流运行记录
        with:
          # 设置保留的工作流运行记录天数为 0，即清除所有过期的记录
          retain_days: 0  # 过期记录保留天数设置为 0
          # 保证至少保留最近 5 次的工作流运行记录，避免记录被全部清理
          keep_minimum_runs: 5  # 最少保留 5 次工作流运行记录