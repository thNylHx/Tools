name: 同步 LoonKissSurge 仓库内容

# 定义触发该工作流的事件
on:
  # 允许通过 GitHub 界面手动触发工作流
  workflow_dispatch:  # 支持手动触发
  schedule:  # 定时触发设置
    # 设置定时触发规则，使用 cron 语法表示每6小时触发一次
    - cron: "0 */6 * * *"  # 每6小时执行一次工作流（分钟为0，每6小时一次）

# 工作流
jobs:
  # 定义名为 Fork-FLITER-list 的任务
  Fork-FLITER-list:
    # 指定运行环境为最新版本的 Ubuntu
    runs-on: ubuntu-latest  # 在 ubuntu-latest 环境中运行任务
    env:
      # 设置环境变量 TZ 为上海时间，确保任务中的时间与上海时区一致
      TZ: 'Asia/Shanghai'  # 配置时区为 Asia/Shanghai

    steps:
      # 步骤1：检出目标仓库
    - name: 检出目标仓库  # 定义步骤名称：检出目标仓库
      uses: actions/checkout@v4  # 使用 GitHub 官方 checkout action 检出代码
      with:
        # 指定需要检出的远程仓库，格式为“用户名/仓库名”
        repository: thNylHx/Tools  # 目标仓库：thNylHx/Tools
        # 设置将仓库检出到本地的目录名称为 Tools
        path: Tools  # 本地目录名称：Tools

    # 步骤 2：设置 Git 用户配置
    # - name: 设置 Git 配置
    #   run: |
    #     git config --global user.name "${{ secrets.USERNAME }}"
    #     git config --global user.email "${{ secrets.EMAIL }}"
    #     # 确保在仓库的 Secrets 中设置了 USERNAME 和 EMAIL

    # 步骤 3：克隆 LoonKissSurge 仓库
    - name: 克隆 LoonKissSurge 仓库
      run: |
        rm -rf "${{ github.workspace }}/LoonKissSurge"  # 清理旧的目录
        git clone "https://github.com/QingRex/LoonKissSurge.git" "${{ github.workspace }}/LoonKissSurge" \
        && echo "成功克隆 LoonKissSurge 仓库" \
        || { echo "克隆失败，退出。"; exit 1; }

    # 步骤 4：清理并创建目标目录
    - name: 重建 Surge/QingRex 目录
      run: |
        TARGET_DIR="${{ github.workspace }}/Tools/Surge/QingRex"
        rm -rf "$TARGET_DIR" && mkdir -p "$TARGET_DIR"
        echo "已重建目录 $TARGET_DIR。"

    # 步骤 5：复制 LoonKissSurge 仓库内容到目标目录
    - name: 复制 LoonKissSurge 仓库内容到 Surge/QingRex
      run: |
        cp -r "${{ github.workspace }}/LoonKissSurge/Surge/." "${{ github.workspace }}/Tools/Surge/QingRex/" \
        && echo "已同步 LoonKissSurge 仓库内容到 Surge/QingRex" \
        || { echo "复制文件失败，退出。"; exit 1; }

    # 步骤 6：设置 Tools 仓库的远程 URL（使用 TOKEN 进行身份验证）
    - name: 为 Tools 仓库设置远程 URL
      run: |
        cd "${{ github.workspace }}/Tools"
        git remote set-url origin "https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ secrets.USERNAME }}/Tools.git"
        # 确保在仓库的 Secrets 中设置了 TOKEN 和 USERNAME

    # 步骤 7：检查更改并推送到 Tools 仓库的 main 分支
    - name: 检查更改并推送到 GitHub Tools 仓库
      run: |
        cd "${{ github.workspace }}/Tools"
        git fetch origin
        if [ -n "$(git status --porcelain)" ]; then
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"  # 提交更改，提交信息包含当前时间戳
          git push origin main && echo "同步完成！"
        else
          echo "没有本地变更，无需同步。"
        fi

    # 步骤 8：发送 Telegram 推送通知
    - name: 发送 Telegram 推送通知
      run: |
        MESSAGE=$'📢  通知 \n🚀  来源：JK567 仓库'$' \n✉️  标题：同步 Surge 上游模块 \n🔔  状态：GitHub Actions 执行完成 \n⏰  时间：'"$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
        # 使用curl命令调用Telegram的Bot API来发送消息
        curl -X POST \
          "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
          -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
          -d "text=${MESSAGE}"

    # 步骤9：清理旧的工作流运行记录
    - name: 清理工作流  # 定义步骤名称：清理工作流
      uses: Mattraks/delete-workflow-runs@main  # 使用 Mattraks 提供的 Action 清理旧的工作流运行记录
      with:
        # 设置保留的工作流运行记录天数为 0，即清除所有过期的记录
        retain_days: 0  # 过期记录保留天数设置为 0
        # 保证至少保留最近 5 次的工作流运行记录，避免记录被全部清理
        keep_minimum_runs: 5  # 最少保留 5 次工作流运行记录