name: 同步 LoonKissSurge 仓库内容

# 定义触发该工作流的事件
on:
  # 允许通过 GitHub 界面手动触发工作流
  workflow_dispatch:  # 支持手动触发
  schedule:  # 定时触发设置
    # 设置定时触发规则，使用 cron 语法表示每6小时触发一次
    - cron: "0 */6 * * *"  # 每6小时执行一次工作流（分钟为0，每6小时一次）

# 工作流
jobs:
  sync:
    # 指定运行环境为最新版本的 Ubuntu
    runs-on: ubuntu-latest  # 在 ubuntu-latest 环境中运行任务
    env:
      # 设置环境变量 TZ 为上海时间，确保任务中的时间与上海时区一致
      TZ: 'Asia/Shanghai'  # 配置时区为 Asia/Shanghai

    steps:
      # 步骤1：检出目标仓库
      - name: 检出目标仓库  # 定义步骤名称：检出目标仓库
        uses: actions/checkout@v4  # 使用 GitHub 官方 checkout action 检出代码
        with:
          # 指定需要检出的远程仓库，格式为“用户名/仓库名”
          repository: thNylHx/Tools  # 目标仓库：thNylHx/Tools
          # 设置将仓库检出到本地的目录名称为 Tools
          path: Tools  # 本地目录名称：Tool

      # 步骤 2：设置 Git 用户配置
      - name: 设置 Git 配置
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          # git config --global user.email "${{ secrets.EMAIL }}"

      # 2. 克隆 LoonKissSurge 仓库到工作目录
      - name: 克隆 LoonKissSurge 仓库
        run: |
          rm -rf "${{ github.workspace }}/LoonKissSurge"
          git clone "https://github.com/QingRex/LoonKissSurge.git" "${{ github.workspace }}/LoonKissSurge" \
            && echo "成功克隆 LoonKissSurge 仓库" \
            || { echo "克隆失败，退出。"; exit 1; }

      # 3. 重建 Surge/QingRex 目标目录
      - name: 重建 Surge/QingRex 目录
        run: |
          TARGET_DIR="${{ github.workspace }}/Tools/Surge/QingRex"
          rm -rf "$TARGET_DIR" && mkdir -p "$TARGET_DIR"
          echo "已重建目录 $TARGET_DIR"

      # 4. 同步 LoonKissSurge 中的 Surge 模块到目标目录
      - name: 同步 LoonKissSurge 到 Surge/QingRex
        run: |
          cp -r "${{ github.workspace }}/LoonKissSurge/Surge/." "${{ github.workspace }}/Tools/Surge/QingRex/" \
            && echo "已同步 LoonKissSurge 内容到 Surge/QingRex" \
            || { echo "复制失败，退出。"; exit 1; }

      # 5. 设置 Tools 仓库远程 URL（通过 TOKEN 进行身份验证）
      - name: 设置 Tools 远程 URL
        run: |
          cd "${{ github.workspace }}/Tools"
          git remote set-url origin "https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ secrets.USERNAME }}/Tools.git"

      # 6. 检查变更并推送更新到 Tools 仓库 main 分支
      - name: 推送更新到 Tools 仓库
        run: |
          cd "${{ github.workspace }}/Tools"
          git fetch origin
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin main && echo "同步完成！"
          else
            echo "没有变更，无需同步。"
          fi

      # 步骤7：获取当前时间并设置为环境变量
      - name: 获取当前时间
        id: current_time
        run: |
          echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # 步骤8：发送 Telegram 通知
      - name: 发送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📢 通知
            🚀 来源：GitHub Actions
            ✉️ 标题：同步 Surge 上游模块
            📦 仓库：JK567
            ⏰ 时间：${{ env.time }}
            🎉 状态：恭喜你！全部任务执行成功

      # 9. 清理旧的工作流运行记录
      - name: 清理工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0          # 清除所有过期记录
          keep_minimum_runs: 5    # 至少保留最近 5 次运行记录