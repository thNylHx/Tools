name: 同步上游规则和模块

on:
  workflow_dispatch:
  schedule:
    - cron: '0 16,22,4,10 * * *'  # 注：以上时间均为上海时间（0:00、6:00、12:00、18:00 执行）

jobs:
  Update:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    steps:
      - name: 检出目标仓库  # 拉取目标仓库代码
        uses: actions/checkout@v4
        with:
          repository: thNylHx/Tools
          path: Tools-repo

      - name: 下载 Surge 规则  # 下载并合并 Surge 规则文件
        shell: bash
        run: |
          set -euo pipefail
          echo "开始下载 Surge 规则文件..."
          repo_name=$(basename "$GITHUB_REPOSITORY")
          if [[ "$repo_name" != "Tools" ]]; then
              echo "当前仓库不是 Tools，跳过执行。"
              exit 0
          fi
          echo "在 Tools 仓库中运行任务"

          # 创建规则目录
          echo "创建规则目录..."
          mkdir -p "Tools-repo/Ruleset/Surge/{Block,Media,Other}"  "Tools-repo/Ruleset/mihomo/Block" "Tools-repo/Surge/Module"
          
          # 定义下载函数：参数1为目标文件，其余参数为 URL 列表
          download_urls() {
            local target_file="$1"
            shift
            echo "清空目标文件：$target_file"
            : > "$target_file"
            for url in "$@"; do
              echo "下载 URL：$url"
              curl -f -L "$url" >> "$target_file" || { echo "下载失败：$url"; exit 1; }
              echo "" >> "$target_file"
            done
          }

          # 合并 广告 规则
          download_urls "Tools-repo/Ruleset/Surge/Block/Ads_Block.list" \
            "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list" \
            "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list" \
            "https://raw.githubusercontent.com/Abcd789JK/Tools/refs/heads/main/Ruleset/Surge/Block/BlockAds.list" \
            "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list" \
            "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list" \
            "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list" \
            "https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge-RULE-SET.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
          # 同步广告规则到 mihomo 目录
          cp Tools-repo/Ruleset/Surge/Block/Ads_Block.list Tools-repo/Ruleset/mihomo/Block/Ads_Block.list
          cp Tools-repo/Ruleset/Surge/Block/Ads_Block.list Tools-repo/Surge/Module/Ads_Block.sgmodule

          # 合并 脸书 规则
          download_urls "Tools-repo/Ruleset/Surge/Media/Facebook.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"

          # 合并 奈飞 规则
          download_urls "Tools-repo/Ruleset/Surge/Media/Netflix.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"

          # 合并 推特 规则
          download_urls "Tools-repo/Ruleset/Surge/Media/Twitter.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"

          # 合并 油管 规则
          download_urls "Tools-repo/Ruleset/Surge/Media/YouTube.list" \
            "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTubeMusic.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/youtube.list"

          # 合并 谷歌 规则
          download_urls "Tools-repo/Ruleset/Surge/Other/Google.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"

          # 合并 海外 规则
          download_urls "Tools-repo/Ruleset/Surge/Other/Global.list" \
            "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list" \
            "https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/ruleset/gfw.txt" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/geolocation-!cn.list"

          # 合并 游戏 规则
          download_urls "Tools-repo/Ruleset/Surge/Other/Game.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/steam.list" \
            "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/epicgames.list"

          # 下载其他单独规则文件
          files=(
            ##### Ads #####
            # MetaCubeX
            "Block/Ads_all.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/category-ads-all.list"
            # ACL4SSR
            "Block/Ads_BanAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanAD.list"
            "Block/Ads_BanProgramAD.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanProgramAD.list"
            # limbopro
            "Block/Ads_Easylist_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylist_surge.list"
            "Block/Ads_EasyListChina.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylistchina_surge.list"
            "Block/Ads_EasyPrivacy_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easyprivacy_surge.list"
            "Block/Ads_Adblock4limbo_surge.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/Surge/rule/Adblock4limbo_surge.list"
            # ConnersHua
            "Block/Ads_Advertising.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list"
            "Block/Ads_Malicious.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list"
            "Block/Ads_Tracking.list https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list"
            # dler-io TG-Twilight geekdada Abcd789JK
            "Block/Ads_BlockAds.list https://raw.githubusercontent.com/Abcd789JK/Tools/refs/heads/main/Ruleset/Surge/Block/BlockAds.list"
            "Block/Ads_Dlerio.list https://raw.githubusercontent.com/dler-io/Rules/main/Surge/Surge%203/Provider/AdBlock.list"
            "Block/Ads_AWAvenue.list https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge-RULE-SET.list"
            "Block/Ads_Chinese.list https://raw.githubusercontent.com/geekdada/surge-list/master/domain-set/chinese-filter.txt"
            ##### Other #####
            # 本地/局域网
            "Other/Private_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.list"
            # PayPal
            "Other/PayPal.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/paypal.list"
            # Openai
            "Other/Openai.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/openai.list"
            # Steam
            "Other/Steam.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/steam.list"
            # Epic
            "Other/Epic.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/epicgames.list"
            # 谷歌
            "Other/vGoogle.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/google.list"
            "Other/Google_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
            # Line
            "Other/Line.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/line.list"
            # 微软
            "Other/GitHub.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/github.list"
            "Other/OneDrive.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/onedrive.list"
            "Other/Microsoft.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/microsoft.list"
            # 海外
            "Other/GlobalGFWa.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list"
            "Other/GlobalGFW.list https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/ruleset/gfw.txt"
            "Other/Global_GFW.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/gfw.list"
            "Other/vGlobal.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/geolocation-!cn.list"
            # 苹果
            "Other/Apple.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/apple.list"
            "Other/AppleCN.list https://github.com/ACL4SSR/ACL4SSR/raw/master/Clash/Apple.list"
            # 中国
            "Other/China.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/cn.list"
            "Other/China_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.list"
            "Other/ChinaASN.list https://raw.githubusercontent.com/missuo/ASN-China/main/ASN.China.list"

            ##### Media #####
            # 油管
            "Media/vYouTube.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/youtube.list"
            "Media/YouTubeMusic.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/YouTubeMusic.list"
            # 电报
            "Media/Telegram.list https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Rules/Telegram.list"
            # 推特
            "Media/vTwitter.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/twitter.list"
            "Media/Twitter_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
            # 脸书
            "Media/vFacebook.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/facebook.list"
            "Media/Facebook_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.list"
            "Media/Instagram.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/instagram.list"
            # 迪士尼
            "Media/Disney.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/disney.list"
            # 奈飞
            "Media/vNetflix.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/netflix.list"
            "Media/Netflix_ip.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
            # Spotify
            "Media/Spotify.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/spotify.list"
            # TikTok
            "Media/TikTok.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/classical/tiktok.list"
            # 海外媒体
            "Media/GlobalMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list"
            # B站海外
            "Media/BilibiliHMT.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/BilibiliHMT.list"
            # 中国媒体
            "Media/ChinaMedia.list https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list"
            "Media/Bilibili.list https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/classical/bilibili.list"
          )
          for file in "${files[@]}"; do
              file_name=$(echo $file | cut -d " " -f 1)
              url=$(echo $file | cut -d " " -f 2)
              [[ "$url" =~ ^https?: ]] || url="https:$url"
              echo "下载文件：$file_name"
              curl -f -L "$url" -o "Tools-repo/Ruleset/Surge/$file_name" || { echo "下载失败：$url"; exit 1; }
          done

      - name: 修正规则内容  # 修正规则文件格式及内容
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list Tools-repo/Ruleset/mihomo/Block/*.list Tools-repo/Surge/Module/Ads_Block.sgmodule; do
            if [[ -f "$file" ]]; then
              # 删除以 "DOMAIN-REGEX," 开头的行
              sed -i '/^DOMAIN-REGEX,/d' "$file"
              # 将以点号开头的行替换为 "DOMAIN-SUFFIX," 前缀
              sed -i 's/^\s*\./DOMAIN-SUFFIX,/' "$file"
              # 为没有前缀的规则行添加 "DOMAIN," 前缀（跳过注释、空行、CIDR 规则等）
              sed -i -E '
                /^\s*$/b;
                /^\s*[#;]/b;
                /^\s*\/\//b;
                /^\s*[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/b;
                /^\s*[0-9A-Fa-f:]+\/[0-9]+/b;
                /^DOMAIN,|^DOMAIN-SUFFIX,|^DOMAIN-KEYWORD,|^DOMAIN-WILDCARD,|^IP-CIDR,|^IP-CIDR6,|^IP-ASN,|^GEOIP,|^AND,|^OR,|^NOT,|^URL-REGEX,|^USER-AGENT,|^PROCESS-NAME,|^DEST-PORT,/b;
                s/^([^#])/DOMAIN,\1/
              ' "$file"
              # 删除注释、空行及行内注释内容
              sed -i -E '/^\s*[#;]/d; /^\s*\/\//d; /^$/d; s| //.*||' "$file"
              # 删除指定域名
              sed -i -e '/DOMAIN,this_ruleset_is_made_by_sukkaw.ruleset.skk.moe/d' "$file"
              # 删除指定的规则及 ",reject" 及其后缀内容
              sed -i -E 's/,reject(,[^,]+)*$//I' "$file"
              # 格式化逗号分隔符
              sed -i 's/, */,/g' "$file"
            else
              echo "文件不存在：$file"
            fi
          done

      - name: 对规则进行排序  # 对规则进行分类排序和去重
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list Tools-repo/Ruleset/mihomo/Block/*.list Tools-repo/Surge/Module/Ads_Block.sgmodule; do
            if [[ -f "$file" ]]; then
              # 为 IPv4 和 IPv6 CIDR 规则添加前缀
              sed -i -E '/^IP-CIDR,/!{/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/s/^/IP-CIDR,/}' "$file"
              sed -i -E '/^IP-CIDR6,/!{/^([a-fA-F0-9]*:){2,}[a-fA-F0-9]*\/[0-9]+/s/^/IP-CIDR6,/}' "$file"
              # 使用 awk 按规则类型排序
              awk '
              /^DOMAIN,/           { print "0 " $0; next }
              /^DOMAIN-SUFFIX,/    { print "1 " $0; next }
              /^DOMAIN-KEYWORD,/   { print "2 " $0; next }
              /^DOMAIN-WILDCARD,/  { print "3 " $0; next }
              /^IP-CIDR,/          { print "4 " $0; next }
              /^IP-CIDR6,/         { print "5 " $0; next }
              /^IP-ASN,/           { print "6 " $0; next }
              /^PROCESS-NAME,/     { print "7 " $0; next }
              /^URL-REGEX,/        { print "8 " $0; next }
              /^USER-AGENT,/       { print "9 " $0; next }
              /^GEOIP,/            { print "10 " $0; next }
              /^AND,/              { print "11 " $0; next }
              /^OR,/               { print "12 " $0; next }
              /^NOT,/              { print "13 " $0; next }
              /^DEST-PORT,/        { print "14 " $0; next }
                                   { print "15 " $0; next }
              ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
              # 为 CIDR 规则添加 "no-resolve" 后缀，但跳过 China_ip.list
              if [[ $(basename "$file") == "China_ip.list" ]]; then
                  echo "Skipping $file for no-resolve addition"
              else
                  awk '/^(IP-CIDR,|IP-CIDR6,|IP-ASN,)/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile && mv tmpfile "$file"
              fi
              # 去除重复规则（忽略大小写）
              awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
            else
              echo "文件不存在：$file"
            fi
          done

      - name: 处理 Surge 规则  # 添加规则名称和统计信息到文件头
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar
          for file in Tools-repo/Ruleset/Surge/**/*.list; do
            if [[ -f "$file" ]]; then
              # 获取当前规则名称
              file_names=$(basename "$file" .list)
              # 判断文件是否已经有 header（第一行以 "#!name" 开头）
              if [[ $(head -n1 "$file") == "#!name"* ]]; then
                header_exists=true
                # 提取 header（直到第一空行为止）
                header=$(sed '/^$/q' "$file")
                # 提取 header 后的规则部分
                rules_original=$(sed '1,/^$/d' "$file")
                # 从 header 中获取旧的日期
                old_date=$(echo "$header" | grep '^#!date' | cut -d'=' -f2- | xargs)
              else
                header_exists=false
                rules_original=$(cat "$file")
              fi
              # 统计规则部分的行数
              line_count=$(echo "$rules_original" | wc -l)
              current_time=$(date "+%Y-%m-%d %H:%M:%S")
              update_needed=false
              if $header_exists; then
                file_mtime=$(stat -c "%y" "$file" | cut -d'.' -f1)
                if [[ "$file_mtime" != "$old_date" ]]; then
                  update_needed=true
                fi
              else
              # 文件没有 header，则需要添加 header
              update_needed=true
              fi
              if $update_needed; then
                new_header=$(printf "#!name = %s\n#!count = %s\n#!date = %s\n\n\n" "$file_names" "$line_count" "$current_time")
                {
                  echo "$new_header"
                  echo "$rules_original"
                } > "$file"
                touch -m -d "$current_time" "$file"
                echo "文件已更新：$file"
              else
                echo "规则无变动，保留原时间：$file"
              fi
            else
              echo "文件不存在：$file"
            fi
          done

      - name: 处理 Surge 模块  # 添加规则名称和统计信息到文件头
        shell: bash
        run: |
          set -euo pipefail
          for file in Tools-repo/Surge/Module/Ads_Block.sgmodule; do
            if [[ -f "$file" ]]; then
              # 提取原文件中的规则部分（从 [Rule] 开始）
              rules_original=$(mktemp)
              awk '/^\[Rule\]/{flag=1; print; next} flag' "$file" > "$rules_original"
              # 计算当前规则数量
              line_count=$(wc -l < "$rules_original")
              # 获取当前推送时间（用于新的 header）
              update_time=$(date "+%Y-%m-%d %H:%M:%S")
              # 构造新文件内容：新的 header + 处理后的规则部分
              tmpfile=$(mktemp)
              {
                # 添加 header
                echo "#!name = Block ads | 自用广告拦截规则合集"
                echo "#!desc = 名称： 自用广告拦截规则合集"
                echo "#!author = RuCu6 Keywos fmz200 可莉🅥 QingRex"
                echo "#!category = 🚫 Block ads"
                echo "#!tag = 广告拦截规则合集"
                echo "#!count = $line_count"
                echo "#!date = $update_time"
                echo ""            # 空行
                # 添加 [Rule] 部分
                echo "[Rule]"
                # 处理规则部分
                awk -F, '{
                  rule = $1
                  if ($0 ~ /^AND,\(\(IP-CIDR,/ || $0 ~ /^AND,\(\(IP-CIDR6,/) {
                    print $0; next
                  }
                  sub(/,no-resolve/, "", $0)
                  if (rule=="DOMAIN-KEYWORD" || rule=="DOMAIN-SUFFIX" || rule=="DOMAIN") {
                    print $0",REJECT,extended-matching,pre-matching"
                  } else if (rule=="URL-REGEX" || rule=="USER-AGENT") {
                    print $0",REJECT,extended-matching"
                  } else if (rule=="AND") {
                    print $0",REJECT,pre-matching"
                  } else if (rule=="IP-CIDR" || rule=="IP-CIDR6") {
                    print $0",REJECT,no-resolve,pre-matching"
                  } else {
                    print $0
                  }
                }' "$rules_original"
              } > "$tmpfile"
              # 从新文件中提取规则部分
              rules_new=$(mktemp)
              awk '/^\[Rule\]/{flag=1; print; next} flag' "$tmpfile" > "$rules_new"
              # 仅比较规则部分
              if diff "$rules_original" "$rules_new" > /dev/null; then
                # 规则部分没有变化，不更新文件
                rm "$tmpfile" "$rules_original" "$rules_new"
                echo "文件未更新，保留原时间：$file"
              else
                # 规则部分有变化，更新整个文件
                mv "$tmpfile" "$file"
                touch -m -d "$update_time" "$file"
                echo "文件已更新：$file"
                rm "$rules_original" "$rules_new"
              fi
            else
              echo "文件不存在：$file"
            fi
          done

      - name: 下载 mihomo 规则  # 下载并保存 mihomo 规则文件
        shell: bash
        run: |
          set -euo pipefail
          repo_name=$(basename "$GITHUB_REPOSITORY")
          if [[ "$repo_name" != "Tools" ]]; then
              echo "当前仓库不是 Tools，跳过执行。"
              exit 0
          fi
          echo "在 Tools 仓库中运行 mihomo 规则任务"
          # 创建 mihomo 规则目录
          mkdir -p Tools-repo/Ruleset/mihomo/{geoip,geosite}
          files=(
            # geosite
            "geosite/Ads_all.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ads-all.mrs"
            "geosite/Local.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"
            "geosite/China.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"
            "geosite/Openai.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/openai.mrs"
            "geosite/PayPal.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"
            "geosite/Apple.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs"
            "geosite/Global.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"
            "geosite/GlobalGFW.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"
            "geosite/Google.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"
            "geosite/YouTube.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"
            "geosite/Steam.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"
            "geosite/Epic.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames.mrs"
            "geosite/Facebook.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/facebook.mrs"
            "geosite/Instagram.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/instagram.mrs"
            "geosite/Twitter.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs"
            "geosite/Telegram.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"
            "geosite/Line.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/line.mrs"
            "geosite/GitHub.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"
            "geosite/OneDrive.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"
            "geosite/Microsoft.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"
            "geosite/Tiktok.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"
            "geosite/Bilibili.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs"
            "geosite/Disney.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs"
            "geosite/Netflix.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"
            "geosite/Spotify.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"

            # geoip
            "geoip/Local.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs"
            "geoip/China.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"
            "geoip/Netflix.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"
            "geoip/Twitter.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.mrs"
            "geoip/Telegram.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"
            "geoip/Facebook.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/facebook.mrs"
            "geoip/Google.mrs https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"
          )
          for file in "${files[@]}"; do
              file_name=$(echo $file | cut -d " " -f 1)
              url=$(echo $file | cut -d " " -f 2)
              [[ "$url" =~ ^https?: ]] || url="https:$url"
              echo "下载 mihomo 文件：$file_name"
              curl -f -L "$url" -o "Tools-repo/Ruleset/mihomo/$file_name" || { echo "下载失败：$url"; exit 1; }
          done

      - name: 处理 mihomo 规则  # 添加规则名称和统计信息到文件头
        shell: bash
        run: |
          set -euo pipefail
          for file in Tools-repo/Ruleset/mihomo/Block/*.list; do
            if [[ -f "$file" ]]; then
              # 删除无效规则：删除以 USER-AGENT、URL-REGEX、AND,((URL-REGEX 和 AND,((IP-CIDR 开头的行
              sed -i -e '/^USER-AGENT/d' "$file"
              sed -i -e '/^URL-REGEX/d' "$file"
              sed -i -e '/^AND,((IP-CIDR/d' "$file"
              sed -i -e '/^AND,((URL-REGEX/d' "$file"
              # 获取当前规则名称
              file_names=$(basename "$file" .list)
              # 判断文件是否已经有 header（第一行以 "#!name" 开头）
              if [[ $(head -n1 "$file") == "#!name"* ]]; then
                header_exists=true
                # 提取 header（直到第一空行为止）
                header=$(sed '/^$/q' "$file")
                # 提取 header 后的规则部分
                rules_original=$(sed '1,/^$/d' "$file")
                # 从 header 中获取旧的日期
                old_date=$(echo "$header" | grep '^#!date' | cut -d'=' -f2- | xargs)
              else
                header_exists=false
                rules_original=$(cat "$file")
              fi
              # 统计规则部分的行数
              line_count=$(echo "$rules_original" | wc -l)
              current_time=$(date "+%Y-%m-%d %H:%M:%S")
              update_needed=false
              if $header_exists; then
                file_mtime=$(stat -c "%y" "$file" | cut -d'.' -f1)
                if [[ "$file_mtime" != "$old_date" ]]; then
                  update_needed=true
                fi
              else
              # 文件没有 header，则需要添加 header
              update_needed=true
              fi
              if $update_needed; then
                new_header=$(printf "#!name = %s\n#!count = %s\n#!date = %s\n\n\n" "$file_names" "$line_count" "$current_time")
                {
                  echo "$new_header"
                  echo "$rules_original"
                } > "$file"
                touch -m -d "$current_time" "$file"
                echo "文件已更新：$file"
              else
                echo "规则无变动，保留原时间：$file"
              fi
            else
              echo "文件不存在：$file"
            fi
          done

      - name: 克隆 LoonKissSurge 仓库      # 克隆 LoonKissSurge 仓库（优化速度）
        run: |
          REPO_DIR="${{ github.workspace }}/LoonKissSurge"
          rm -rf "$REPO_DIR"  # 确保删除不会报错
          git clone --depth=1 --single-branch "https://github.com/QingRex/LoonKissSurge.git" "$REPO_DIR" \
            && echo "✅ 成功克隆 LoonKissSurge 仓库" \
            || { echo "❌ 克隆失败，退出。"; exit 1; }
            
      - name: 重建 Surge/QingRex 目录      # 重建 Surge/QingRex 目标目录
        run: |
          TARGET_DIR="${{ github.workspace }}/Tools-repo/Surge/QingRex"
          rm -rf "$TARGET_DIR" && mkdir -p "$TARGET_DIR"
          echo "✅ 已重建目录 $TARGET_DIR"

      - name: 同步 LoonKissSurge 到 Surge/QingRex      # 同步 LoonKissSurge 中的 Surge 模块到目标目录
        run: |
          cp -r "${{ github.workspace }}/LoonKissSurge/Surge/." "${{ github.workspace }}/Tools-repo/Surge/QingRex/" \
            && echo "已同步 LoonKissSurge 内容到 Surge/QingRex" \
            || { echo "复制失败，退出。"; exit 1; }

      - name: 设置 Tools-repo 远程 URL      # 设置 Tools-repo 仓库远程 URL（通过 TOKEN 进行身份验证）
        run: |
          git config --global user.name "${{ secrets.USERNAME }}"
          git config --global user.email "${{ secrets.EMAIL }}"
          cd "${{ github.workspace }}/Tools-repo"
          git remote set-url origin "https://x-access-token:${{ secrets.TOKEN }}@github.com/${{ secrets.USERNAME }}/Tools.git"

      - name: 推送更新到 Tools-repo 仓库      # 检查变更并推送更新到 Tools-repo 仓库 main 分支
        shell: bash
        run: |
          set -euo pipefail
          echo "检查仓库更新状态..."
          cd "${{ github.workspace }}/Tools-repo"
          git pull --rebase --autostash origin main
          if [[ -n $(git status --porcelain) ]]; then
            echo "检测到变更，开始提交更新..."
            git pull --rebase --autostash origin main
            git config --local user.name "GitHub Actions"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin main && echo "同步完成！"
          else
            echo "没有变更，无需同步。"
          fi

      - name: 设置当前时间变量  # 保存当前时间到环境变量中
        shell: bash
        run: |
          echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: 发送 Telegram 通知  # 通过 Telegram 发送执行通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            📢 通知
            🚀 来源：GitHub Actions
            ✉️ 标题：同步上游规则和模块
            📦 仓库：JK_567
            ⏰ 时间：${{ env.time }}
            🎉 状态：全部任务成功执行

      - name: 清理工作流记录  # 删除旧的工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 2
          